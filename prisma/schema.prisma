generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  password  String
  role      UserRole    @default(USER)
  createAt  DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  isDeleted Boolean     @default(false)
  video     Video[]
  like      Like[]
  Review    Review[]
  Comment   Comment[]
  WatchList WatchList[]
  Purchase  Purchase[]
  Payment  Payment[]
  @@map("user")
}

model Video {
  id                String   @id @default(uuid())
  title             String
  genre             String
  duration          String?
  category          String @default("movie")
  language          String?
  thumbnailImage    String?
  video             String?
  director          String
  releaseYear       Int
  cast              String
  streamingPlatform String
  description       String
  like              Int      @default(0)
  price             Float
  rating            Float
  dislike           Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  review    Review[]
  watchList WatchList[]
  purchase  Purchase[]
  comment   Comment[]
  Like      Like[]

  @@map("video")
}

model Like {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  createdAt DateTime @default(now())

  @@map("likes")
}

model Review {
  id     String @id @default(uuid())
  rating Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  content   String
  createdAt DateTime @default(now())

  isApproved Boolean @default(false)

  @@map("reviews")
}

model Comment {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  isApproved Boolean @default(false)

  content  String
  createAt DateTime @default(now())

  @@map("comments")
}

model WatchList {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  createAt DateTime @default(now())

  @@map("watch-list")
}

model Purchase {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])

  type      PurchaseType
  expiresAt DateTime?
  paymentId String
  createAt  DateTime     @default(now())

  @@map("purchases")
}

model Payment {
  id            String   @id @default(uuid())
  tran_id       String   @unique
  total_amount  Float
  cus_name      String
  cus_email     String
  cus_phone     String
  cus_add1      String
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  @@map("payments")
}


enum PurchaseType {
  BUY
  RENT
}

enum UserRole {
  USER
  ADMIN
}

enum StreamingPlatform {
  NETFLIX
  DISNEY
  HBO
  AMAZON
  APPLE
  YOUTUBE
  SPOTIFY
}
